from mathutils import Vector, Matrix
from gpu_extras.batch import batch_for_shader
import gpu

UNIFORM_COLOR = gpu.shader.from_builtin('UNIFORM_COLOR')
SMOOTH_COLOR = gpu.shader.from_builtin('SMOOTH_COLOR')

coords = [
	Vector((-0.30000001192092896, -0.30000001192092896, -0.30000001192092896)),
	Vector((-0.30000001192092896, -0.30000001192092896, 0.30000001192092896)),
	Vector((-0.30000001192092896, 0.30000001192092896, -0.30000001192092896)),
	Vector((-0.30000001192092896, 0.30000001192092896, 0.30000001192092896)),
	Vector((0.30000001192092896, -0.30000001192092896, -0.30000001192092896)),
	Vector((0.30000001192092896, -0.30000001192092896, 0.30000001192092896)),
	Vector((0.30000001192092896, 0.30000001192092896, -0.30000001192092896)),
	Vector((0.30000001192092896, 0.30000001192092896, 0.30000001192092896)),
	Vector((-0.33824074268341064, 0.20294444262981415, -0.33824074268341064)),
	Vector((-0.3638034164905548, 0.0727606937289238, -0.3638034164905548)),
	Vector((-0.3638034164905548, -0.0727606937289238, -0.3638034164905548)),
	Vector((-0.33824074268341064, -0.20294444262981415, -0.33824074268341064)),
	Vector((-0.33824074268341064, -0.33824074268341064, -0.20294444262981415)),
	Vector((-0.3638034164905548, -0.3638034164905548, -0.0727606937289238)),
	Vector((-0.3638034164905548, -0.3638034164905548, 0.0727606937289238)),
	Vector((-0.33824074268341064, -0.33824074268341064, 0.20294444262981415)),
	Vector((-0.33824074268341064, -0.20294444262981415, 0.33824074268341064)),
	Vector((-0.3638034164905548, -0.0727606937289238, 0.3638034164905548)),
	Vector((-0.3638034164905548, 0.0727606937289238, 0.3638034164905548)),
	Vector((-0.33824074268341064, 0.20294444262981415, 0.33824074268341064)),
	Vector((-0.33824074268341064, 0.33824074268341064, 0.20294444262981415)),
	Vector((-0.3638034164905548, 0.3638034164905548, 0.0727606937289238)),
	Vector((-0.3638034164905548, 0.3638034164905548, -0.0727606937289238)),
	Vector((-0.33824074268341064, 0.33824074268341064, -0.20294444262981415)),
	Vector((0.20294444262981415, 0.33824074268341064, -0.33824074268341064)),
	Vector((0.0727606937289238, 0.3638034164905548, -0.3638034164905548)),
	Vector((-0.0727606937289238, 0.3638034164905548, -0.3638034164905548)),
	Vector((-0.20294444262981415, 0.33824074268341064, -0.33824074268341064)),
	Vector((-0.20294444262981415, 0.33824074268341064, 0.33824074268341064)),
	Vector((-0.0727606937289238, 0.3638034164905548, 0.3638034164905548)),
	Vector((0.0727606937289238, 0.3638034164905548, 0.3638034164905548)),
	Vector((0.20294444262981415, 0.33824074268341064, 0.33824074268341064)),
	Vector((0.33824074268341064, 0.33824074268341064, 0.20294444262981415)),
	Vector((0.3638034164905548, 0.3638034164905548, 0.0727606937289238)),
	Vector((0.3638034164905548, 0.3638034164905548, -0.0727606937289238)),
	Vector((0.33824074268341064, 0.33824074268341064, -0.20294444262981415)),
	Vector((0.33824074268341064, -0.20294444262981415, -0.33824074268341064)),
	Vector((0.3638034164905548, -0.0727606937289238, -0.3638034164905548)),
	Vector((0.3638034164905548, 0.0727606937289238, -0.3638034164905548)),
	Vector((0.33824074268341064, 0.20294444262981415, -0.33824074268341064)),
	Vector((0.33824074268341064, 0.20294444262981415, 0.33824074268341064)),
	Vector((0.3638034164905548, 0.0727606937289238, 0.3638034164905548)),
	Vector((0.3638034164905548, -0.0727606937289238, 0.3638034164905548)),
	Vector((0.33824074268341064, -0.20294444262981415, 0.33824074268341064)),
	Vector((0.33824074268341064, -0.33824074268341064, 0.20294444262981415)),
	Vector((0.3638034164905548, -0.3638034164905548, 0.0727606937289238)),
	Vector((0.3638034164905548, -0.3638034164905548, -0.0727606937289238)),
	Vector((0.33824074268341064, -0.33824074268341064, -0.20294444262981415)),
	Vector((-0.20294444262981415, -0.33824074268341064, -0.33824074268341064)),
	Vector((-0.0727606937289238, -0.3638034164905548, -0.3638034164905548)),
	Vector((0.0727606937289238, -0.3638034164905548, -0.3638034164905548)),
	Vector((0.20294444262981415, -0.33824074268341064, -0.33824074268341064)),
	Vector((0.20294444262981415, -0.33824074268341064, 0.33824074268341064)),
	Vector((0.0727606937289238, -0.3638034164905548, 0.3638034164905548)),
	Vector((-0.0727606937289238, -0.3638034164905548, 0.3638034164905548)),
	Vector((-0.20294444262981415, -0.33824074268341064, 0.33824074268341064)),
	Vector((0.2377217710018158, 0.2377217710018158, 0.396202951669693)),
	Vector((0.26349300146102905, 0.08783101290464401, 0.4391550123691559)),
	Vector((0.26349300146102905, -0.08783101290464401, 0.4391550123691559)),
	Vector((0.2377217710018158, -0.2377217710018158, 0.396202951669693)),
	Vector((0.08783101290464401, 0.26349300146102905, 0.4391550123691559)),
	Vector((0.10000000894069672, 0.10000000894069672, 0.5)),
	Vector((0.10000000894069672, -0.10000000894069672, 0.5)),
	Vector((0.08783101290464401, -0.26349300146102905, 0.4391550123691559)),
	Vector((-0.08783101290464401, 0.26349300146102905, 0.4391550123691559)),
	Vector((-0.10000000894069672, 0.10000000894069672, 0.5)),
	Vector((-0.10000000894069672, -0.10000000894069672, 0.5)),
	Vector((-0.08783101290464401, -0.26349300146102905, 0.4391550123691559)),
	Vector((-0.2377217710018158, 0.2377217710018158, 0.396202951669693)),
	Vector((-0.26349300146102905, 0.08783101290464401, 0.4391550123691559)),
	Vector((-0.26349300146102905, -0.08783101290464401, 0.4391550123691559)),
	Vector((-0.2377217710018158, -0.2377217710018158, 0.396202951669693)),
	Vector((-0.2377217710018158, 0.2377217710018158, -0.396202951669693)),
	Vector((-0.26349300146102905, 0.08783101290464401, -0.4391550123691559)),
	Vector((-0.26349300146102905, -0.08783101290464401, -0.4391550123691559)),
	Vector((-0.2377217710018158, -0.2377217710018158, -0.396202951669693)),
	Vector((-0.08783101290464401, 0.26349300146102905, -0.4391550123691559)),
	Vector((-0.10000000894069672, 0.10000000894069672, -0.5)),
	Vector((-0.10000000894069672, -0.10000000894069672, -0.5)),
	Vector((-0.08783101290464401, -0.26349300146102905, -0.4391550123691559)),
	Vector((0.08783101290464401, 0.26349300146102905, -0.4391550123691559)),
	Vector((0.10000000894069672, 0.10000000894069672, -0.5)),
	Vector((0.10000000894069672, -0.10000000894069672, -0.5)),
	Vector((0.08783101290464401, -0.26349300146102905, -0.4391550123691559)),
	Vector((0.2377217710018158, 0.2377217710018158, -0.396202951669693)),
	Vector((0.26349300146102905, 0.08783101290464401, -0.4391550123691559)),
	Vector((0.26349300146102905, -0.08783101290464401, -0.4391550123691559)),
	Vector((0.2377217710018158, -0.2377217710018158, -0.396202951669693)),
	Vector((0.2377217710018158, -0.396202951669693, -0.2377217710018158)),
	Vector((0.08783101290464401, -0.4391550123691559, -0.26349300146102905)),
	Vector((-0.08783101290464401, -0.4391550123691559, -0.26349300146102905)),
	Vector((-0.2377217710018158, -0.396202951669693, -0.2377217710018158)),
	Vector((0.26349300146102905, -0.4391550123691559, -0.08783101290464401)),
	Vector((0.10000000894069672, -0.5, -0.10000000894069672)),
	Vector((-0.10000000894069672, -0.5, -0.10000000894069672)),
	Vector((-0.26349300146102905, -0.4391550123691559, -0.08783101290464401)),
	Vector((0.26349300146102905, -0.4391550123691559, 0.08783101290464401)),
	Vector((0.10000000894069672, -0.5, 0.10000000894069672)),
	Vector((-0.10000000894069672, -0.5, 0.10000000894069672)),
	Vector((-0.26349300146102905, -0.4391550123691559, 0.08783101290464401)),
	Vector((0.2377217710018158, -0.396202951669693, 0.2377217710018158)),
	Vector((0.08783101290464401, -0.4391550123691559, 0.26349300146102905)),
	Vector((-0.08783101290464401, -0.4391550123691559, 0.26349300146102905)),
	Vector((-0.2377217710018158, -0.396202951669693, 0.2377217710018158)),
	Vector((0.396202951669693, 0.2377217710018158, -0.2377217710018158)),
	Vector((0.4391550123691559, 0.08783101290464401, -0.26349300146102905)),
	Vector((0.4391550123691559, -0.08783101290464401, -0.26349300146102905)),
	Vector((0.396202951669693, -0.2377217710018158, -0.2377217710018158)),
	Vector((0.4391550123691559, 0.26349300146102905, -0.08783101290464401)),
	Vector((0.5, 0.10000000894069672, -0.10000000894069672)),
	Vector((0.5, -0.10000000894069672, -0.10000000894069672)),
	Vector((0.4391550123691559, -0.26349300146102905, -0.08783101290464401)),
	Vector((0.4391550123691559, 0.26349300146102905, 0.08783101290464401)),
	Vector((0.5, 0.10000000894069672, 0.10000000894069672)),
	Vector((0.5, -0.10000000894069672, 0.10000000894069672)),
	Vector((0.4391550123691559, -0.26349300146102905, 0.08783101290464401)),
	Vector((0.396202951669693, 0.2377217710018158, 0.2377217710018158)),
	Vector((0.4391550123691559, 0.08783101290464401, 0.26349300146102905)),
	Vector((0.4391550123691559, -0.08783101290464401, 0.26349300146102905)),
	Vector((0.396202951669693, -0.2377217710018158, 0.2377217710018158)),
	Vector((-0.2377217710018158, 0.396202951669693, -0.2377217710018158)),
	Vector((-0.08783101290464401, 0.4391550123691559, -0.26349300146102905)),
	Vector((0.08783101290464401, 0.4391550123691559, -0.26349300146102905)),
	Vector((0.2377217710018158, 0.396202951669693, -0.2377217710018158)),
	Vector((-0.26349300146102905, 0.4391550123691559, -0.08783101290464401)),
	Vector((-0.10000000894069672, 0.5, -0.10000000894069672)),
	Vector((0.10000000894069672, 0.5, -0.10000000894069672)),
	Vector((0.26349300146102905, 0.4391550123691559, -0.08783101290464401)),
	Vector((-0.26349300146102905, 0.4391550123691559, 0.08783101290464401)),
	Vector((-0.10000000894069672, 0.5, 0.10000000894069672)),
	Vector((0.10000000894069672, 0.5, 0.10000000894069672)),
	Vector((0.26349300146102905, 0.4391550123691559, 0.08783101290464401)),
	Vector((-0.2377217710018158, 0.396202951669693, 0.2377217710018158)),
	Vector((-0.08783101290464401, 0.4391550123691559, 0.26349300146102905)),
	Vector((0.08783101290464401, 0.4391550123691559, 0.26349300146102905)),
	Vector((0.2377217710018158, 0.396202951669693, 0.2377217710018158)),
	Vector((-0.396202951669693, -0.2377217710018158, -0.2377217710018158)),
	Vector((-0.4391550123691559, -0.08783101290464401, -0.26349300146102905)),
	Vector((-0.4391550123691559, 0.08783101290464401, -0.26349300146102905)),
	Vector((-0.396202951669693, 0.2377217710018158, -0.2377217710018158)),
	Vector((-0.4391550123691559, -0.26349300146102905, -0.08783101290464401)),
	Vector((-0.5, -0.10000000894069672, -0.10000000894069672)),
	Vector((-0.5, 0.10000000894069672, -0.10000000894069672)),
	Vector((-0.4391550123691559, 0.26349300146102905, -0.08783101290464401)),
	Vector((-0.4391550123691559, -0.26349300146102905, 0.08783101290464401)),
	Vector((-0.5, -0.10000000894069672, 0.10000000894069672)),
	Vector((-0.5, 0.10000000894069672, 0.10000000894069672)),
	Vector((-0.4391550123691559, 0.26349300146102905, 0.08783101290464401)),
	Vector((-0.396202951669693, -0.2377217710018158, 0.2377217710018158)),
	Vector((-0.4391550123691559, -0.08783101290464401, 0.26349300146102905)),
	Vector((-0.4391550123691559, 0.08783101290464401, 0.26349300146102905)),
	Vector((-0.396202951669693, 0.2377217710018158, 0.2377217710018158)),
]

indices = [
	(151, 19, 3),
	(151, 3, 20),
	(135, 31, 7),
	(135, 7, 32),
	(119, 43, 5),
	(119, 5, 44),
	(103, 55, 1),
	(103, 1, 15),
	(87, 36, 4),
	(87, 4, 51),
	(71, 16, 1),
	(71, 1, 55),
	(43, 59, 52),
	(43, 52, 5),
	(59, 63, 53),
	(59, 53, 52),
	(67, 71, 55),
	(67, 55, 54),
	(7, 31, 56),
	(7, 56, 40),
	(40, 56, 57),
	(40, 57, 41),
	(42, 58, 59),
	(42, 59, 43),
	(31, 30, 60),
	(31, 60, 56),
	(56, 60, 61),
	(56, 61, 57),
	(58, 62, 63),
	(58, 63, 59),
	(63, 67, 54),
	(63, 54, 53),
	(30, 29, 64),
	(30, 64, 60),
	(29, 28, 68),
	(29, 68, 64),
	(64, 68, 69),
	(64, 69, 65),
	(77, 81, 82),
	(77, 82, 78),
	(66, 70, 71),
	(66, 71, 67),
	(28, 3, 19),
	(28, 19, 68),
	(68, 19, 18),
	(68, 18, 69),
	(57, 61, 62),
	(57, 62, 58),
	(70, 17, 16),
	(70, 16, 71),
	(11, 75, 48),
	(11, 48, 0),
	(75, 79, 49),
	(75, 49, 48),
	(41, 57, 58),
	(41, 58, 42),
	(83, 87, 51),
	(83, 51, 50),
	(2, 27, 72),
	(2, 72, 8),
	(8, 72, 73),
	(8, 73, 9),
	(65, 69, 70),
	(65, 70, 66),
	(10, 74, 75),
	(10, 75, 11),
	(27, 26, 76),
	(27, 76, 72),
	(72, 76, 77),
	(72, 77, 73),
	(69, 18, 17),
	(69, 17, 70),
	(74, 78, 79),
	(74, 79, 75),
	(62, 66, 67),
	(62, 67, 63),
	(79, 83, 50),
	(79, 50, 49),
	(26, 25, 80),
	(26, 80, 76),
	(9, 73, 74),
	(9, 74, 10),
	(25, 24, 84),
	(25, 84, 80),
	(80, 84, 85),
	(80, 85, 81),
	(149, 17, 18),
	(149, 18, 150),
	(82, 86, 87),
	(82, 87, 83),
	(24, 6, 39),
	(24, 39, 84),
	(84, 39, 38),
	(84, 38, 85),
	(73, 77, 78),
	(73, 78, 74),
	(86, 37, 36),
	(86, 36, 87),
	(48, 91, 12),
	(48, 12, 0),
	(91, 95, 13),
	(91, 13, 12),
	(99, 103, 15),
	(99, 15, 14),
	(4, 47, 88),
	(4, 88, 51),
	(51, 88, 89),
	(51, 89, 50),
	(76, 80, 81),
	(76, 81, 77),
	(49, 90, 91),
	(49, 91, 48),
	(47, 46, 92),
	(47, 92, 88),
	(88, 92, 93),
	(88, 93, 89),
	(78, 82, 83),
	(78, 83, 79),
	(90, 94, 95),
	(90, 95, 91),
	(95, 99, 14),
	(95, 14, 13),
	(46, 45, 96),
	(46, 96, 92),
	(50, 89, 90),
	(50, 90, 49),
	(92, 96, 97),
	(92, 97, 93),
	(45, 44, 100),
	(45, 100, 96),
	(96, 100, 101),
	(96, 101, 97),
	(98, 102, 103),
	(98, 103, 99),
	(44, 5, 52),
	(44, 52, 100),
	(100, 52, 53),
	(100, 53, 101),
	(89, 93, 94),
	(89, 94, 90),
	(102, 54, 55),
	(102, 55, 103),
	(36, 107, 47),
	(36, 47, 4),
	(107, 111, 46),
	(107, 46, 47),
	(125, 129, 130),
	(125, 130, 126),
	(115, 119, 44),
	(115, 44, 45),
	(6, 35, 104),
	(6, 104, 39),
	(39, 104, 105),
	(39, 105, 38),
	(81, 85, 86),
	(81, 86, 82),
	(37, 106, 107),
	(37, 107, 36),
	(35, 34, 108),
	(35, 108, 104),
	(104, 108, 109),
	(104, 109, 105),
	(85, 38, 37),
	(85, 37, 86),
	(106, 110, 111),
	(106, 111, 107),
	(111, 115, 45),
	(111, 45, 46),
	(34, 33, 112),
	(34, 112, 108),
	(38, 105, 106),
	(38, 106, 37),
	(108, 112, 113),
	(108, 113, 109),
	(33, 32, 116),
	(33, 116, 112),
	(112, 116, 117),
	(112, 117, 113),
	(114, 118, 119),
	(114, 119, 115),
	(32, 7, 40),
	(32, 40, 116),
	(116, 40, 41),
	(116, 41, 117),
	(109, 113, 114),
	(109, 114, 110),
	(118, 42, 43),
	(118, 43, 119),
	(24, 123, 35),
	(24, 35, 6),
	(123, 127, 34),
	(123, 34, 35),
	(105, 109, 110),
	(105, 110, 106),
	(131, 135, 32),
	(131, 32, 33),
	(2, 23, 120),
	(2, 120, 27),
	(27, 120, 121),
	(27, 121, 26),
	(97, 101, 102),
	(97, 102, 98),
	(25, 122, 123),
	(25, 123, 24),
	(23, 22, 124),
	(23, 124, 120),
	(120, 124, 125),
	(120, 125, 121),
	(101, 53, 54),
	(101, 54, 102),
	(122, 126, 127),
	(122, 127, 123),
	(127, 131, 33),
	(127, 33, 34),
	(22, 21, 128),
	(22, 128, 124),
	(26, 121, 122),
	(26, 122, 25),
	(124, 128, 129),
	(124, 129, 125),
	(21, 20, 132),
	(21, 132, 128),
	(128, 132, 133),
	(128, 133, 129),
	(130, 134, 135),
	(130, 135, 131),
	(20, 3, 28),
	(20, 28, 132),
	(132, 28, 29),
	(132, 29, 133),
	(121, 125, 126),
	(121, 126, 122),
	(134, 30, 31),
	(134, 31, 135),
	(8, 139, 23),
	(8, 23, 2),
	(139, 143, 22),
	(139, 22, 23),
	(133, 29, 30),
	(133, 30, 134),
	(147, 151, 20),
	(147, 20, 21),
	(0, 12, 136),
	(0, 136, 11),
	(11, 136, 137),
	(11, 137, 10),
	(113, 117, 118),
	(113, 118, 114),
	(9, 138, 139),
	(9, 139, 8),
	(12, 13, 140),
	(12, 140, 136),
	(136, 140, 141),
	(136, 141, 137),
	(117, 41, 42),
	(117, 42, 118),
	(138, 142, 143),
	(138, 143, 139),
	(143, 147, 21),
	(143, 21, 22),
	(13, 14, 144),
	(13, 144, 140),
	(10, 137, 138),
	(10, 138, 9),
	(140, 144, 145),
	(140, 145, 141),
	(14, 15, 148),
	(14, 148, 144),
	(144, 148, 149),
	(144, 149, 145),
	(146, 150, 151),
	(146, 151, 147),
	(15, 1, 16),
	(15, 16, 148),
	(148, 16, 17),
	(148, 17, 149),
	(141, 145, 146),
	(141, 146, 142),
	(150, 18, 19),
	(150, 19, 151),
	(145, 149, 150),
	(145, 150, 146),
	(142, 146, 147),
	(142, 147, 143),
	(126, 130, 131),
	(126, 131, 127),
	(110, 114, 115),
	(110, 115, 111),
	(94, 98, 99),
	(94, 99, 95),
	(93, 97, 98),
	(93, 98, 94),
	(129, 133, 134),
	(129, 134, 130),
	(60, 64, 65),
	(60, 65, 61),
	(61, 65, 66),
	(61, 66, 62),
	(137, 141, 142),
	(137, 142, 138),
]

colors = [
]

def gen_poly_batch_flat(center=Vector((0,0,0)), scale=Vector((1,1,1)), direction=Vector((0,0,1))):
	global coords, indices
	mat_loc = Matrix.Translation(center.to_4d())
	mat_sca = Matrix.Diagonal(scale.to_4d())
	mat_rot = direction.to_track_quat('Z', 'Y').to_matrix().to_4x4()
	mat_out = mat_loc @ mat_rot @ mat_sca
	return batch_for_shader(gpu.shader.from_builtin('UNIFORM_COLOR'), 'TRIS', {"pos": [mat_out @ coord for coord in coords]}, indices=indices)

def draw_poly_batch_flat(batch=None, color_front=(0,0,0,1), color_back=(0,0,0,1)):
	if not isinstance(batch, gpu.types.GPUBatch): return
	gpu.state.face_culling_set('FRONT')
	gpu.state.depth_test_set('GREATER')
	gpu.state.depth_mask_set(True)
	gpu.state.blend_set('ALPHA')
	UNIFORM_COLOR.uniform_float("color", color_back)
	batch.draw(UNIFORM_COLOR)
	gpu.state.face_culling_set('BACK')
	gpu.state.depth_test_set('LESS_EQUAL')
	UNIFORM_COLOR.uniform_float("color", color_front)
	batch.draw(UNIFORM_COLOR)
	gpu.state.face_culling_set('NONE')
	gpu.state.depth_test_set('NONE')
	gpu.state.depth_mask_set(False)
	gpu.state.blend_set('NONE')

def gen_poly_batch_smooth(center=Vector((0,0,0)), scale=Vector((1,1,1)), direction=Vector((0,0,1))):
	global coords, indices, colors
	mat_loc = Matrix.Translation(center.to_4d())
	mat_sca = Matrix.Diagonal(scale.to_4d())
	mat_rot = direction.to_track_quat('Z', 'Y').to_matrix().to_4x4()
	mat_out = mat_loc @ mat_rot @ mat_sca
	batch = batch_for_shader(SMOOTH_COLOR, 'TRIS', {'pos': [mat_out @ coord for coord in coords], 'color':colors}, indices=indices)
	if isinstance(batch, gpu.types.GPUBatch): return batch
	return None

def draw_poly_batch_smooth(batch=None):
	if not isinstance(batch, gpu.types.GPUBatch): return
	gpu.state.blend_set('ALPHA')
	gpu.state.depth_mask_set(True)
	gpu.state.face_culling_set('BACK')
	batch.draw(SMOOTH_COLOR)
	gpu.state.face_culling_set('NONE')
	gpu.state.depth_mask_set(False)
	gpu.state.blend_set('NONE')

